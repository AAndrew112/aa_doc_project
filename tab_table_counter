import os
import csv
import argparse
import re
from docx import Document

# ---------- detection helpers ----------

_WORDY = re.compile(r"[A-Za-z0-9]{2,}")

def is_tabbed_row(txt: str) -> bool:
    """True if the line looks like a real tabbed row (2+ meaningful columns)."""
    if not txt or not txt.strip():
        return False
    parts = [p.strip() for p in txt.split("\t") if p.strip()]
    if len(parts) < 2:
        return False
    ok_cols = [p for p in parts if _WORDY.search(p)]
    return len(ok_cols) >= 2

def normalize_snippet(txt: str, max_len: int = 200) -> str:
    """Clean up tabs for readability and trim."""
    s = " | ".join(p.strip() for p in txt.split("\t") if p.strip())
    s = re.sub(r"\s+", " ", s).strip()
    return s[:max_len]

# ---------- per-file processing ----------

def process_docx(file_path: str):
    """Count tabbed tables in the document BODY and collect one snippet per table."""
    try:
        doc = Document(file_path)
    except Exception:
        return 0, ""

    count = 0
    snippets = []

    in_table_block = False
    for para in doc.paragraphs:  # body only (headers/footers not included)
        txt = para.text or ""
        if is_tabbed_row(txt):
            if not in_table_block:
                # start of a new tabbed "table"
                count += 1
                snippets.append(normalize_snippet(txt))
                in_table_block = True
        else:
            # leaving a table block (allow strict adjacency)
            if in_table_block:
                in_table_block = False

    return count, "\n".join(snippets)

# ---------- CLI / traversal ----------

def scan(root: str, out_csv: str):
    with open(out_csv, "w", newline="", encoding="utf-8") as f:
        w = csv.writer(f)
        w.writerow(["File Path", "Tabbed Table Count", "Snippet"])
        for dirpath, _, filenames in os.walk(root):
            for name in filenames:
                if name.lower().endswith(".docx"):
                    path = os.path.join(dirpath, name)
                    count, snippet = process_docx(path)
                    w.writerow([path, count, snippet])

def main():
    p = argparse.ArgumentParser(description="Find tabbed tables in DOCX files.")
    p.add_argument("--root", required=True, help="Root directory to search")
    args = p.parse_args()
    scan(args.root, "tabbed_table_summary.csv")
    print("Saved: tabbed_table_summary.csv")

if __name__ == "__main__":
    main()
