#!/usr/bin/env python3
from pathlib import Path
import argparse
import csv
import sys
from datetime import datetime
from docx import Document

def extract_text_from_docx(path: Path, include_tables: bool, include_hf: bool) -> str:
    doc = Document(path)
    chunks = []

    # Body paragraphs
    for p in doc.paragraphs:
        if p.text:
            chunks.append(p.text)

    # Body tables
    if include_tables:
        for tbl in doc.tables:
            for row in tbl.rows:
                for cell in row.cells:
                    if cell.text:
                        chunks.append(cell.text)

    # Headers/Footers
    if include_hf:
        for section in doc.sections:
            if section.header:
                for p in section.header.paragraphs:
                    if p.text:
                        chunks.append(p.text)
                for tbl in section.header.tables:
                    for row in tbl.rows:
                        for cell in row.cells:
                            if cell.text:
                                chunks.append(cell.text)
            if section.footer:
                for p in section.footer.paragraphs:
                    if p.text:
                        chunks.append(p.text)
                for tbl in section.footer.tables:
                    for row in tbl.rows:
                        for cell in row.cells:
                            if cell.text:
                                chunks.append(cell.text)

    return "\n".join(chunks)

def any_highlight_in_docx(path: Path, include_tables: bool, include_hf: bool) -> bool:
    doc = Document(path)

    def runs_in(paragraphs):
        for p in paragraphs:
            for r in p.runs:
                yield r

    # Body paragraphs
    for r in runs_in(doc.paragraphs):
        if r.font and r.font.highlight_color:
            return True

    # Body tables
    if include_tables:
        for tbl in doc.tables:
            for row in tbl.rows:
                for cell in row.cells:
                    for r in runs_in(cell.paragraphs):
                        if r.font and r.font.highlight_color:
                            return True

    # Headers/Footers
    if include_hf:
        for section in doc.sections:
            if section.header:
                for r in runs_in(section.header.paragraphs):
                    if r.font and r.font.highlight_color:
                        return True
                for tbl in section.header.tables:
                    for row in tbl.rows:
                        for cell in row.cells:
                            for r in runs_in(cell.paragraphs):
                                if r.font and r.font.highlight_color:
                                    return True
            if section.footer:
                for r in runs_in(section.footer.paragraphs):
                    if r.font and r.font.highlight_color:
                        return True
                for tbl in section.footer.tables:
                    for row in tbl.rows:
                        for cell in row.cells:
                            for r in runs_in(cell.paragraphs):
                                if r.font and r.font.highlight_color:
                                    return True
    return False

def count_pairs_and_empty(text: str):
    stack = []
    pairs = 0
    empty_pairs = 0
    for i, ch in enumerate(text):
        if ch == "[":
            stack.append(i)
        elif ch == "]":
            if stack:
                start = stack.pop()
                pairs += 1
                if text[start+1:i].strip() == "":
                    empty_pairs += 1
    return pairs, empty_pairs

def timestamped_outpath(out_path: Path) -> Path:
    ts = datetime.now().strftime("%m%d%Y_%H%M")
    stem, suf = out_path.stem, (out_path.suffix or ".csv")
    return out_path.with_name(f"{stem}__{ts}{suf}")

def main():
    p = argparse.ArgumentParser(
        description="Scan .docx recursively; count bracket pairs (and empty pairs); detect highlights; write CSV."
    )
    p.add_argument("--root", type=Path, required=True, help="Root folder to search.")
    p.add_argument("--out", type=Path, default=Path("docx_bracket_counts.csv"),
                   help="Base output CSV filename (timestamp appended).")
    p.add_argument("--no-tables", action="store_true", help="Exclude table text.")
    p.add_argument("--no-headers-footers", action="store_true", help="Exclude headers/footers.")
    p.add_argument("--no-timestamp", action="store_true",
                   help="Do NOT append timestamp to output filename.")
    args = p.parse_args()

    if not args.root.exists():
        p.error(f"--root path does not exist: {args.root}")

    include_tables = not args.no_tables
    include_hf = not args.no_headers_footers
    out_path = args.out if args.no_timestamp else timestamped_outpath(args.out)

    # Status 1: start + indexing
    files = list(args.root.rglob("*.docx"))
    print(f"[1/5] Indexed {len(files)} .docx files under {args.root}")

    results = []
    total = len(files)
    if total == 0:
        # Status 5: done (no files)
        Path(out_path).parent.mkdir(parents=True, exist_ok=True)
        with open(out_path, "w", newline="", encoding="utf-8") as fp:
            writer = csv.DictWriter(fp, fieldnames=["file_path", "pairs", "empty_pairs", "has_highlight"])
            writer.writeheader()
        print(f"[5/5] Done. Output: {out_path}")
        return

    # Progress checkpoints: 25%, 50%, 75%
    checkpoints = {0.25, 0.50, 0.75}
    fired = set()

    for idx, f in enumerate(files, start=1):
        try:
            text = extract_text_from_docx(f, include_tables, include_hf)
            pairs, empty_pairs = count_pairs_and_empty(text)
            try:
                has_highlight = any_highlight_in_docx(f, include_tables, include_hf)
            except Exception as e:
                print(f"[error] Highlight check failed for {f}: {e}", file=sys.stderr)
                has_highlight = ""
            results.append({
                "file_path": str(f),
                "pairs": pairs,
                "empty_pairs": empty_pairs,
                "has_highlight": has_highlight
            })
        except Exception as e:
            print(f"[error] Failed on {f}: {e}", file=sys.stderr)
            results.append({
                "file_path": str(f),
                "pairs": "",
                "empty_pairs": "",
                "has_highlight": ""
            })

        # Status 2–4: 25/50/75% milestones (max three prints)
        progress = idx / total
        for cp in sorted(checkpoints):
            if progress >= cp and cp not in fired:
                pct = int(cp * 100)
                print(f"[{2 if cp==0.25 else 3 if cp==0.50 else 4}/5] ~{pct}% complete ({idx}/{total})")
                fired.add(cp)

    # Write CSV
    Path(out_path).parent.mkdir(parents=True, exist_ok=True)
    with open(out_path, "w", newline="", encoding="utf-8") as fp:
        writer = csv.DictWriter(fp, fieldnames=["file_path", "pairs", "empty_pairs", "has_highlight"])
        writer.writeheader()
        writer.writerows(results)

    # Status 5: done
    print(f"[5/5] Done. Wrote {len(results)} rows → {out_path}")

if __name__ == "__main__":
    main()
