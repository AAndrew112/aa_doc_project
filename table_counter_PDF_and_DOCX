#!/usr/bin/env python3
from pathlib import Path
import argparse, csv, sys
from datetime import datetime
from zipfile import ZipFile
import xml.etree.ElementTree as ET
import pdfplumber

# ----------------------- DOCX (standard library XML) ------------------------
W_NS = "http://schemas.openxmlformats.org/wordprocessingml/2006/main"
PARTS_TO_SCAN = {
    "Body":       "word/document.xml",
    "Footnotes":  "word/footnotes.xml",
    "Endnotes":   "word/endnotes.xml",
    "Comments":   "word/comments.xml",
}

def _list_header_footer_parts(zf: ZipFile):
    headers, footers = [], []
    for name in zf.namelist():
        if name.startswith("word/header") and name.endswith(".xml"):
            headers.append(name)
        elif name.startswith("word/footer") and name.endswith(".xml"):
            footers.append(name)
    return headers, footers

def _localname(tag: str) -> str:
    return tag.split("}", 1)[1] if tag and tag[0] == "{" else tag

def _count_tbls_in_part(zf: ZipFile, part_name: str):
    try:
        xml = zf.read(part_name)
    except KeyError:
        return 0, 0
    root = ET.fromstring(xml)
    parent_map = {child: parent for parent in root.iter() for child in parent}
    total = 0
    txbx = 0
    for tbl in root.iter(f"{{{W_NS}}}tbl"):
        total += 1
        p = parent_map.get(tbl)
        inside_txbx = False
        while p is not None:
            if _localname(p.tag) == "txbxContent" and p.tag.startswith("{"+W_NS+"}"):
                inside_txbx = True
                break
            p = parent_map.get(p)
        if inside_txbx:
            txbx += 1
    return total, txbx

def count_tables_docx_xml(path: Path):
    counts = {
        "Pages": "",
        "Image-Only Pages": "",
        "Body Tables": 0,
        "Header Tables": 0,
        "Footer Tables": 0,
        "Footnote Tables": 0,
        "Endnote Tables": 0,
        "Comment Tables": 0,
        "Tables in Text Boxes/Shapes": 0,
        "Lattice Tables": "",
        "Stream Tables": "",
        "Total Tables": 0,
        "Original Total Tables": "",
        "Conservative Recount Applied": "No"
    }
    with ZipFile(path) as zf:
        for label, part in PARTS_TO_SCAN.items():
            tot, txbx = _count_tbls_in_part(zf, part)
            if label == "Body":
                counts["Body Tables"] += tot
            elif label == "Footnotes":
                counts["Footnote Tables"] += tot
            elif label == "Endnotes":
                counts["Endnote Tables"] += tot
            elif label == "Comments":
                counts["Comment Tables"] += tot
            counts["Tables in Text Boxes/Shapes"] += txbx
            counts["Total Tables"] += tot
        headers, footers = _list_header_footer_parts(zf)
        for part in headers:
            tot, txbx = _count_tbls_in_part(zf, part)
            counts["Header Tables"] += tot
            counts["Tables in Text Boxes/Shapes"] += txbx
            counts["Total Tables"] += tot
        for part in footers:
            tot, txbx = _count_tbls_in_part(zf, part)
            counts["Footer Tables"] += tot
            counts["Tables in Text Boxes/Shapes"] += txbx
            counts["Total Tables"] += tot
    return counts

# ---------------------------- PDF (pdfplumber) ------------------------------
LATTICE_SETTINGS = {"vertical_strategy": "lines", "horizontal_strategy": "lines"}
STREAM_SETTINGS_BASE = {
    "vertical_strategy": "text",
    "horizontal_strategy": "text",
    "text_tolerance": 0.4,           # tightened from 1
    "intersection_tolerance": 0.4,   # tightened from 1
    "min_words_vertical": 4,
    "min_words_horizontal": 4,
}
STREAM_SETTI_
